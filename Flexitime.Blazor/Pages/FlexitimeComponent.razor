@page "/"
@using System.Text.Json.Serialization
@using System.Text.Json

@inject FlexitimeService FlexitimeService
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Flexitime Monitor</h3>

<div class="row font-weight-bold d-none d-lg-flex d-xl-flex">
    <div class="col-lg-2">
        <p class="text-right">Day</p>
    </div>
    <div class="col-lg-2">
        <p>Start</p>
    </div>
    <div class="col-lg-2">
        <p>End</p>
    </div>
    <div class="col-lg-2">
        <p>Break</p>
    </div>
    <div class="col-lg-2">
        <p>Summary</p>
    </div>
</div>

@if (_data != null)
{
    <EditForm EditContext="@EditContext">
        <FlexitimeValidator @ref="_flexitimeValidator" />
        @foreach (Day day in FlexitimeService.Days)
        {
            string errorClass = Errors.ContainsKey(day) ? "is-invalid" : "";
            ;

            <div class="row">
                <div class="form-group col-lg-2">
                    <p class="text-right">@day</p>
                </div>
                <div class="form-group col-lg-2">
                    <input class="form-control @errorClass" type="time" name="asd" @bind="_data[day].StartTime" @bind:event="oninput" @onchange="@(e => FieldChanged(e, day))" />
                </div>
                <div class="form-group col-lg-2">
                    <input class="form-control @errorClass" type="time" name="asd2" @bind="_data[day].EndTime" @bind:event="oninput" @onchange="@(e => FieldChanged(e, day))" />
                </div>
                <div class="form-group col-lg-2">
                    <input class="form-control @errorClass" type="time" name="asd3" @bind="_data[day].BreakTime" @bind:event="oninput" @onchange="@(e => FieldChanged(e, day))" />
                </div>
                <div class="form-group col-lg-2 align-middle">
                    <p>@_data[day].WorkedTimeDayString</p>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-12">
                <p>Total worked time this week is @_data.WorkedTimeWeekString</p>
                <ValidationSummary />
            </div>
        </div>
    </EditForm>
}

@code {
    FlexitimeWeekData _data;
    FlexitimeValidator _flexitimeValidator;

    public EditContext EditContext { get; set; }

    Dictionary<Day, List<string>> Errors { get; set; } = new Dictionary<Day, List<string>>();

    protected override async Task OnInitializedAsync()
    {
        _data = FlexitimeService.Data;
        EditContext = new EditContext(_data);
        foreach (FlexitimeDayData day in _data)
        {
            day.StartTime = DateTime.Today + TimeSpan.FromHours(7);
            day.EndTime = DateTime.Today + TimeSpan.FromHours(15);
            day.BreakTime = DateTime.Today + TimeSpan.FromMinutes(30);
        }
        foreach (Day day in FlexitimeService.Days)
        {
            string key = $"data-{day}";
            if (!await LocalStorage.ContainKeyAsync(key))
                continue;
            FlexitimeDayData dayData = JsonSerializer.Deserialize<FlexitimeDayData>(await LocalStorage.GetItemAsStringAsync(key));
            FlexitimeService.Data[day] = dayData;
        }
        FlexitimeService.Validate();
        RunValidation();
    }

    private async void FieldChanged(ChangeEventArgs arg, Day day)
    {
        await JS.InvokeAsync<string>("console.log", "changed");
        await LocalStorage.SetItemAsync($"data-{day}", JsonSerializer.Serialize(FlexitimeService.Data[day]));
        RunValidation();
    }

    private void RunValidation()
    {
        _flexitimeValidator.ClearErrors();

        Errors = FlexitimeService.Validate();
        _flexitimeValidator.DisplayErrors(Errors);
        StateHasChanged();
    }
}
